import os
import requests
from dotenv import load_dotenv
from datetime import datetime
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

load_dotenv()

PINATA_API_KEY = os.getenv("PINATA_API_KEY")
PINATA_SECRET = os.getenv("PINATA_SECRET_KEY")
PINATA_BASE = "https://api.pinata.cloud"
TEMPLATE = os.getenv("TEMPLATE_PATH")

FONT_XLG = ImageFont.truetype("assets/fonts/Orbitron-Bold.ttf", 54)
FONT_LG = ImageFont.truetype("assets/fonts/Orbitron-Bold.ttf", 48)
FONT_MD = ImageFont.truetype("assets/fonts/Orbitron-Regular.ttf", 32)

def pin_file(image_bytes, name):
    headers = {
        "pinata_api_key": PINATA_API_KEY,
        "pinata_secret_api_key": PINATA_SECRET,
    }
    files = {
        'file': (f'{name}.png', image_bytes, 'image/png')
    }
    res = requests.post(f"{PINATA_BASE}/pinning/pinFileToIPFS", files=files, headers=headers)
    hash = res.json()["IpfsHash"]
    return f"https://gateway.pinata.cloud/ipfs/{hash}"

def pin_json(metadata):
    headers = {
        "pinata_api_key": PINATA_API_KEY,
        "pinata_secret_api_key": PINATA_SECRET,
        "Content-Type": "application/json"
    }
    res = requests.post(f"{PINATA_BASE}/pinning/pinJSONToIPFS", json=metadata, headers=headers)
    hash = res.json()["IpfsHash"]
    return f"https://gateway.pinata.cloud/ipfs/{hash}"

def generate_and_pin(challenge, score, wallet, timestamp):
    img = Image.open(TEMPLATE).convert("RGBA")
    draw = ImageDraw.Draw(img)
    W, H = img.size

    # Draw challenge, score, wallet, timestamp
    symbol = challenge["symbol"]
    bbox = draw.textbbox((0,0), symbol, font=FONT_LG)
    w_sym, h_sym = bbox[2] - bbox[0], bbox[3] - bbox[1]
    x_sym = (W - w_sym) / 2
    y_sym = H * 0.35   # ~18% down from top; tweak as needed
    draw.text((x_sym, y_sym), symbol, font=FONT_XLG, fill="#00FFFF")

    # 2) SCORE (just below the symbol, centered)
    score_txt = f"Score: {score}%"
    bbox = draw.textbbox((0,0), score_txt, font=FONT_LG)
    w_sc, h_sc = bbox[2] - bbox[0], bbox[3] - bbox[1]
    x_sc = (W - w_sc) / 2
    y_sc = y_sym + h_sym + 30   # 20px spacing below symbol
    draw.text((x_sc, y_sc), score_txt, font=FONT_LG, fill="#FF69B4")

    # 3) WALLET (bottom-left, above the footer)
    wallet_txt = f"Wallet: {wallet[:4]} … {wallet[-4:]}"
    bbox = draw.textbbox((0,0), wallet_txt, font=FONT_MD)
    h_wt = bbox[3] - bbox[1]
    x_wt = W * 0.30             # 5% in from left
    y_wt = H * 0.56             # ~75% down from top
    draw.text((x_wt, y_wt), wallet_txt, font=FONT_MD, fill="#C71585")

    # 4) DATE & TIME (just below wallet line)
    date_txt = "Date: " + timestamp.strftime("%Y-%m-%d %H:%M")
    bbox = draw.textbbox((0,0), date_txt, font=FONT_MD)
    y_dt = y_wt + h_wt + 10      # 8px spacing
    draw.text((x_wt, y_dt), date_txt, font=FONT_MD, fill="#66FCF1")

    # Save image to buffer
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)

    image_url = pin_file(buf, f"nft-{wallet}")
    metadata = {
        "name": challenge["name"] + " Credential",
        "symbol": challenge["symbol"],
        "description": f"{challenge['name']} — NFT proof generated by SkillFlex",
        "image": image_url,
        "attributes": [
            {"trait_type": "Score", "value": score},
            {"trait_type": "Wallet", "value": wallet[:4] + "..." + wallet[-4:]},
            {"trait_type": "Timestamp", "value": timestamp.strftime("%Y-%m-%d %H:%M")}
        ]
    }
    metadata_url = pin_json(metadata)
    return metadata_url, image_url
